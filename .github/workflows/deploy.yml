name: Deploy to Azure

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-api:
    name: Build API Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build API
        run: npm run build --workspace=api
      
      - name: Run API tests
        run: npm run test --workspace=api
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Get short SHA
        id: sha
        run: echo "short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Get ACR credentials
        id: acr-creds
        run: |
          az acr login --name ${{ vars.AZURE_ACR_NAME }}
      
      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ vars.AZURE_ACR_NAME }}.azurecr.io/octocat-api:${{ steps.sha.outputs.short }}
      
      - name: Set API image tag output
        id: api-image
        run: echo "tag=${{ steps.sha.outputs.short }}" >> $GITHUB_OUTPUT
    
    outputs:
      imageTag: ${{ steps.api-image.outputs.tag }}

  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Frontend
        run: npm run build --workspace=frontend
      
      - name: Lint code
        run: npm run lint --workspace=frontend
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Get short SHA
        id: sha
        run: echo "short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Get ACR credentials
        id: acr-creds
        run: |
          az acr login --name ${{ vars.AZURE_ACR_NAME }}
      
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ vars.AZURE_ACR_NAME }}.azurecr.io/octocat-frontend:${{ steps.sha.outputs.short }}
      
      - name: Set Frontend image tag output
        id: frontend-image
        run: echo "tag=${{ steps.sha.outputs.short }}" >> $GITHUB_OUTPUT
    
    outputs:
      imageTag: ${{ steps.frontend-image.outputs.tag }}

  deploy-staging:
    name: Deploy to Staging
    needs: [build-api, build-frontend]
    runs-on: ubuntu-latest
    environment:
      name: Staging
      url: ${{ steps.deploy.outputs.frontendUrl }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Set variables in parameter file
        run: |
          IMAGE_TAG="${{ needs.build-api.outputs.imageTag }}" \
          AZURE_ACR_NAME="${{ vars.AZURE_ACR_NAME }}" \
          envsubst < infra/parameters/staging.parameters.json > staging-params.json
          cat staging-params.json
      
      - name: Deploy to Staging
        id: deploy
        run: |
          az deployment group create \
            --name staging-deployment-${{ needs.build-api.outputs.imageTag }} \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --template-file infra/main.bicep \
            --parameters @staging-params.json \
            --output json
          
          # Get the frontend URL from the deployment output
          FRONTEND_URL=$(az deployment group show \
            --name staging-deployment-${{ needs.build-api.outputs.imageTag }} \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --query "properties.outputs.frontendUrl.value" \
            --output tsv)
          
          echo "frontendUrl=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $FRONTEND_URL"

  deploy-production:
    name: Deploy to Production
    needs: [build-api, build-frontend, deploy-staging]
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: ${{ steps.deploy.outputs.frontendUrl }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Set variables in parameter file
        run: |
          IMAGE_TAG="${{ needs.build-api.outputs.imageTag }}" \
          AZURE_ACR_NAME="${{ vars.AZURE_ACR_NAME }}" \
          envsubst < infra/parameters/production.parameters.json > production-params.json
          cat production-params.json
      
      - name: Deploy to Production
        id: deploy
        run: |
          az deployment group create \
            --name prod-deployment-${{ needs.build-api.outputs.imageTag }} \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP_PROD }} \
            --template-file infra/main.bicep \
            --parameters @production-params.json \
            --output json
          
          # Get the frontend URL from the deployment output
          FRONTEND_URL=$(az deployment group show \
            --name prod-deployment-${{ needs.build-api.outputs.imageTag }} \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP_PROD }} \
            --query "properties.outputs.frontendUrl.value" \
            --output tsv)
          
          echo "frontendUrl=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $FRONTEND_URL"
